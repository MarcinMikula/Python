Wyjaśnienie kodu z Wykładu 21 krok po kroku

Przykład 1: Obliczanie ciągu Fibonacciego – rekurencja naiwna
1. def fib_recursive(n): Definiujemy funkcję do obliczania ciągu Fibonacciego metodą rekurencyjną.
2. if n <= 1: Warunek bazowy: F(0) = 0, F(1) = 1.
3. return n: Zwracamy n.
4. return fib_recursive(n-1) + fib_recursive(n-2): Rekurencyjnie obliczamy F(n) = F(n-1) + F(n-2).
   - Dla n=5: F(5) = F(4) + F(3), F(4) = F(3) + F(2), itd.
   - Powoduje wielokrotne obliczanie tych samych wartości, np. F(3) jest obliczane wielokrotnie.

Złożoność:
- Czasowa: O(2^n) – eksponencjalna, ponieważ każde wywołanie generuje dwa kolejne.
- Dla n=10: około 2^10 = 1024 operacji.

Przykład 2: Obliczanie ciągu Fibonacciego – DP z memoizacją (top-down)
1. def fib_memo(n, memo=None): Definiujemy funkcję z memoizacją.
2. if memo is None: Jeśli memo nie jest podane, tworzymy nowy słownik.
3. memo = {}: Inicjalizujemy pusty słownik.
4. if n <= 1: Warunek bazowy: F(0) = 0, F(1) = 1.
5. return n: Zwracamy n.
6. if n in memo: Jeśli wynik dla n jest już w słowniku, zwracamy go.
7. return memo[n]: Zwracamy zapisany wynik.
8. memo[n] = fib_memo(n-1, memo) + fib_memo(n-2, memo): Obliczamy F(n) i zapisujemy w słowniku.
9. return memo[n]: Zwracamy wynik.
   - Dla n=5: Oblicza F(5) = F(4) + F(3), zapisuje wyniki w słowniku, unika ponownych obliczeń.

Złożoność:
- Czasowa: O(n) – każdy podproblem jest obliczany tylko raz.
- Pamięciowa: O(n) – przechowujemy wyniki w słowniku.
- Dla n=10: około 10 operacji.

Przykład 3: Obliczanie ciągu Fibonacciego – DP z tablicowaniem (bottom-up)
1. def fib_tabulation(n): Definiujemy funkcję z tablicowaniem.
2. if n <= 1: Warunek bazowy: F(0) = 0, F(1) = 1.
3. return n: Zwracamy n.
4. table = [0] * (n + 1): Tworzymy tablicę do przechowywania wyników.
5. table[1] = 1: Ustawiamy F(1) = 1.
6. for i in range(2, n + 1): Iterujemy od 2 do n.
7. table[i] = table[i-1] + table[i-2]: Obliczamy F(i) = F(i-1) + F(i-2).
8. return table[n]: Zwracamy F(n).
   - Dla n=5: table = [0, 1, 1, 2, 3, 5], F(5) = 5.

Złożoność:
- Czasowa: O(n) – jedna pętla od 2 do n.
- Pamięciowa: O(n) – przechowujemy tablicę.
- Dla n=10: około 10 operacji.

Przykład 4: Porównanie czasów wykonania
1. import time: Importujemy moduł time do mierzenia czasu.
2. def measure_time(func, n): Definiujemy funkcję do mierzenia czasu wykonania.
3. start = time.time(): Zapisujemy czas startu.
4. result = func(n): Wykonujemy funkcję.
5. end = time.time(): Zapisujemy czas końca.
6. return result, end - start: Zwracamy wynik i czas wykonania.
7. n = 35: Ustawiamy n na 35 (wartość, dla której różnice w czasie będą widoczne).
8. result1, time1 = measure_time(fib_recursive, n): Mierzymy czas dla rekurencji.
9. result2, time2 = measure_time(fib_memo, n): Mierzymy czas dla memoizacji.
10. result3, time3 = measure_time(fib_tabulation, n): Mierzymy czas dla tablicowania.
11. print(f"\nPorównanie czasów dla n={n}:"): Wyświetlamy wyniki:
    - Rekurencja: Bardzo wolna (O(2^n)), np. kilka sekund.
    - Memoizacja: Szybka (O(n)), np. ułamek sekundy.
    - Tablicowanie: Szybka (O(n)), zazwyczaj najszybsza, bo bez rekurencji.

Matematyczny kontekst:
- Ciąg Fibonacciego: F(n) = F(n-1) + F(n-2), F(0) = 0, F(1) = 1.
- Dla n=10: F(10) = 55.
- Liczba operacji w rekurencji: ~2^10, w DP: ~10.